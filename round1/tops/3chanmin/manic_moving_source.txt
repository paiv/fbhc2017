#include <cstdio>
#include <queue>
#include <cmath>
#include <vector>
#include <algorithm>

using namespace std;

void update(int &dest, int val) {
  if (val == -1) return;
  if (dest == -1 || dest > val) {
    dest = val;
  }
}

int getPath(const vector<vector<int>> &mat, int prevCost, int a, int b, int c, int d) {
  if (prevCost == -1) return -1;
  if (mat[a][b] == -1) return -1;
  if (mat[b][c] == -1) return -1;
  if (mat[c][d] == -1) return -1;
  return prevCost + mat[a][b] + mat[b][c] + mat[c][d];
}
int getPath(const vector<vector<int>> &mat, int prevCost, int a, int b, int c) {
  if (prevCost == -1) return -1;
  if (mat[a][b] == -1) return -1;
  if (mat[b][c] == -1) return -1;
  return prevCost + mat[a][b] + mat[b][c];
}
int getPath(const vector<vector<int>> &mat, int prevCost, int a, int b) {
  if (prevCost == -1) return -1;
  if (mat[a][b] == -1) return -1;
  return prevCost + mat[a][b];
}

int main() {
  int testcase_count;
  scanf("%d", &testcase_count);
  for (int testcase = 1; testcase <= testcase_count; testcase++) {
    int n, m, K;
    scanf("%d%d%d", &n, &m, &K);
    vector<vector<int>> mat(n, vector<int>(n, -1));
    for (int i = 0; i < m; i++) {
      int a, b, c;
      scanf("%d%d%d", &a, &b, &c);
      a--, b--;
      if (mat[a][b] == -1 || mat[a][b] > c) {
        mat[a][b] = mat[b][a] = c;
      }
    }
    for (int i = 0; i < n; i++) {
      mat[i][i] = 0;
    }
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        for (int k = 0; k < n; k++) {
          if (mat[j][i] == -1 || mat[i][k] == -1) continue;
          if (mat[j][k] == -1 || mat[j][k] > mat[j][i] + mat[i][k]) {
            mat[j][k] = mat[j][i] + mat[i][k];
          }
        }
      }
    }
    vector<int> S(K), D(K);
    for (int i = 0; i < K; i++) {
      scanf("%d%d", &S[i], &D[i]);
      S[i]--, D[i]--;
    }
    int prev[2] = { mat[0][S[0]], -1 };
    for (int i = 1; i < K; i++) {
      int best[2] = { -1, -1 };
      if (prev[0] != -1) {
        update(best[0], getPath(mat, prev[0], S[i - 1], D[i - 1], S[i]));
        update(best[1], getPath(mat, prev[0], S[i - 1], S[i]));
      }
      if (prev[1] != -1) {
        update(best[0], getPath(mat, prev[1], S[i - 1], D[i - 2], D[i - 1], S[i]));
        update(best[1], getPath(mat, prev[1], S[i - 1], D[i - 2], S[i]));
      }
      prev[0] = best[0];
      prev[1] = best[1];
    }
    int ans = -1;
    if (prev[0] != -1) {
      update(ans, getPath(mat, prev[0], S[K - 1], D[K - 1]));
    }
    if (prev[1] != -1 && K >= 2) {
      update(ans, getPath(mat, prev[1], S[K - 1], D[K - 2], D[K - 1]));
    }
    printf("Case #%d: %d\n", testcase, ans);
  }
  return 0;
}