#include <stdio.h>
#include <algorithm>

long long MAX = 1000ll * 400 * 5000;
long long adj[110][110];
int st[5010], ed[5010];
long long dp[5010][2];

long long Solve()
{
    int n, m, t;
    scanf("%d%d%d", &n, &m, &t);
    for (int i=0; i<n; i++) for (int j=0; j<n; j++) adj[i][j] = i== j ? 0 : MAX;
    for (int i=0; i<m; i++)
    {
        int v1, v2, c;
        scanf("%d%d%d", &v1, &v2, &c);
        v1--;
        v2--;
        adj[v1][v2] = std::min(adj[v1][v2], (long long)c);
        adj[v2][v1] = std::min(adj[v2][v1], (long long)c);
    }
    for (int k=0; k<n; k++)
    {
        for (int i=0; i<n; i++)
        {
            for (int j=0; j<n; j++) adj[i][j] = std::min(adj[i][j], adj[i][k] + adj[k][j]);
        }
    }
    st[0] = ed[0] = 0;
    for (int i=1; i<=t; i++)
    {
        scanf("%d%d", &st[i], &ed[i]);
        st[i]--;
        ed[i]--;
    }
    dp[0][0] = dp[0][1] = 0;
    for (int i=1; i<=t; i++)
    {
        dp[i][0] = dp[i][1] = MAX;
        if (i > 1) dp[i][0] = std::min(dp[i][0], dp[i-1][0] + adj[st[i-1]][ed[i-2]] + adj[ed[i-2]][st[i]]);
        dp[i][0] = std::min(dp[i][0], dp[i-1][1] + adj[st[i-1]][st[i]]);
        if (i > 1) dp[i][1] = std::min(dp[i][1], dp[i-1][0] + adj[st[i-1]][ed[i-2]] + adj[ed[i-2]][ed[i-1]] + adj[ed[i-1]][st[i]]);
        dp[i][1] = std::min(dp[i][1], dp[i-1][1] + adj[st[i-1]][ed[i-1]] + adj[ed[i-1]][st[i]]);
    }
    long long ans = dp[t][1] + adj[st[t]][ed[t]];
    ans = std::min(ans, dp[t][0] + adj[st[t]][ed[t-1]] + adj[ed[t-1]][ed[t]]);
    return ans >= MAX ? -1 : ans;

}

int main()
{
    int cas;
    scanf("%d", &cas);
    for (int i=0; i<cas; i++)
    {
        long long ans = Solve();
        printf("Case #%d: %lld\n", i+1, ans);
    }
    return 0;
}
