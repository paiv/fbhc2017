#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef long double ld;

#define all(c) (c).begin(),(c).end()
#define sz(c) (int)(c).size()
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define image(a) {sort(all(a)), a.resize(unique(all(a)) - a.begin());}

const ll inf = (ll)1e14;
void solve() {
  int n, m, p;
  cin >> n >> m >> p;
  vector<vector<ll>> a(n, vector<ll>(n, inf));
  for (int i = 0; i < n; i++) {
    a[i][i] = 0;
  }
  for (int i = 0; i < m; i++) {
    int x, y;
    ll z;
    cin >> x >> y >> z;
    x--, y--;
    a[x][y] = min(a[x][y], z);
    a[y][x] = min(a[y][x], z);
  }
  for (int k = 0; k < n; k++) {
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        a[i][j] = min(a[i][j], a[i][k] + a[k][j]);
      }
    }
  }
  vector<int> fr(p + 2);
  vector<int> to(p + 2);
  for (int i = 0; i < p; i++) {
    cin >> fr[i] >> to[i];
    fr[i]--;
    to[i]--;
  }
  vector<vector<vector<ll>>> dp(p + 2, vector<vector<ll>>(2, vector<ll>(2, inf)));
  dp[0][0][0] = a[0][fr[0]];
  for (int i = 0; i < p; i++) {
    dp[i][1][0] = min(dp[i][1][0], dp[i][0][0] + a[fr[i]][to[i]]);    
    dp[i][0][1] = min(dp[i][0][1], dp[i][0][0] + a[fr[i]][fr[i + 1]]);    
    dp[i][1][1] = min(dp[i][1][1], dp[i][0][1] + a[fr[i + 1]][to[i]]);
    dp[i + 1][0][0] = min(dp[i + 1][0][0], dp[i][1][0] + a[to[i]][fr[i + 1]]);
    dp[i + 1][1][0] = min(dp[i + 1][1][0], dp[i][1][1] + a[to[i]][to[i + 1]]);
    dp[i + 1][0][1] = min(dp[i + 1][0][1], dp[i][1][1] + a[to[i]][fr[i + 2]]);    
  }
  ll ans = dp[p - 1][1][0];
  if (ans >= inf) {
    ans = -1;
  }
  cout << ans << endl;
}

int main(){
  #ifdef home
  assert(freopen("a.out","wt",stdout));
  assert(freopen("a.in","rt",stdin));
  #endif              
  int T;
  cin >> T;
  for (int ti = 1; ti <= T; ti++) {
    cout << "Case #" << ti << ": ";
    solve();
  }
  return 0;
}
